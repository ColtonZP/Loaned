{"version":3,"sources":["store.tsx","inspectText.ts","components/Form.tsx","components/Person.tsx","components/People.tsx","App.tsx","index.tsx"],"names":["useStore","create","set","records","addPerson","name","amount","change","person","history","state","updatePerson","map","record","Number","incKeywords","decKeywords","Form","useState","value","updateValue","onSubmit","e","preventDefault","submittedText","input","verb","trimmedInput","trim","match","replace","forEach","word","includes","status","reason","inspectText","alert","find","className","type","onChange","target","Person","toFixed","People","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.2d256ff7.chunk.js","sourcesContent":["import create from 'zustand';\n\ntype Store = {\n  records: {\n    name: string;\n    amount: number;\n    history: {\n      amount: number;\n      change: string;\n    }[];\n  }[];\n  addPerson: (name: string, amount: number, change: string) => void;\n  updatePerson: (name: string, amount: number, change: string) => void;\n};\n\nexport const useStore = create<Store>(set => ({\n  records: [],\n\n  addPerson: (name, amount, change) => {\n    const submitAmount = change === 'inc' ? amount : -amount;\n    const person = {\n      name,\n      amount: submitAmount,\n      history: [{ amount, change }],\n    };\n\n    set(state => ({ records: [...state.records, person] }));\n  },\n\n  updatePerson: (name, amount, change) => {\n    set(state => ({\n      records: state.records.map(record => {\n        if (record.name === name) {\n          return {\n            ...record,\n            amount:\n              change === 'inc'\n                ? (Number(record.amount * 100) + Number(amount * 100)) / 100\n                : (Number(record.amount * 100) - Number(amount * 100)) / 100,\n            history: [...record.history, { amount, change }],\n          };\n        }\n\n        return record;\n      }),\n    }));\n  },\n}));\n","const incKeywords = ['owes', 'took', 'borrowed', 'incurred', 'needs', 'needed'];\nconst decKeywords = ['paid', 'gave', 'provided', 'loaned'];\n\nexport const inspectText = (input: string) => {\n  let change, verb;\n  const nameReg = /^\\S+/;\n  const amountReg = /(?:[0-9],*)+(?:\\.[0-9]{1,2})?|\\.[0-9]{1,2}/;\n\n  const trimmedInput: string = input.trim();\n  let name: string = (trimmedInput.match(nameReg) || [])[0];\n  const amount: number = Number(\n    (trimmedInput.match(amountReg) || [])[0].replace(/[,]/g, ''),\n  );\n\n  incKeywords.forEach(word => {\n    const isInc = input.includes(word);\n    if (isInc) {\n      change = 'inc';\n      verb = word;\n    }\n  });\n\n  if (!change) {\n    decKeywords.forEach(word => {\n      const isDec = input.includes(word);\n      if (isDec) {\n        change = 'dec';\n        verb = word;\n      }\n    });\n  }\n\n  if (name === verb) {\n    name = '';\n  }\n\n  if (!change) {\n    return { status: 'failed', reason: 'verb (ex. owes, paid, took, gave)' };\n  } else if (!name) {\n    return { status: 'failed', reason: 'name' };\n  } else if (!amount) {\n    return { status: 'failed', reason: 'amount' };\n  } else {\n    return { status: 'passed', name, change, amount };\n  }\n};\n","import React, { useState } from 'react';\n\nimport { useStore } from '../store';\nimport { inspectText } from '../inspectText';\n\nexport const Form = () => {\n  const records: any = useStore(state => state.records);\n  const addPerson: any = useStore(state => state.addPerson);\n  const updatePerson: any = useStore(state => state.updatePerson);\n\n  const [value, updateValue] = useState<string>('');\n\n  const handleSubmit = (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n    const submittedText = inspectText(value);\n    if (submittedText.status === 'failed') {\n      alert('a(n) ' + submittedText.reason + ' appears to be missing.');\n    } else if (submittedText.name && submittedText.amount) {\n      records.find(\n        (record: { name: string }) => record.name === submittedText.name,\n      )\n        ? updatePerson(\n            submittedText.name,\n            submittedText.amount,\n            submittedText.change,\n          )\n        : addPerson(\n            submittedText.name,\n            submittedText.amount,\n            submittedText.change,\n          );\n    }\n    updateValue('');\n  };\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <input\n        className=\"text-input\"\n        type=\"text\"\n        value={value}\n        onChange={e => updateValue(e.target.value)}\n      />\n      <div className=\"placeholder\"></div>\n    </form>\n  );\n};\n","import React from 'react';\n\ntype Props = {\n  value: {\n    name: string;\n    amount: number;\n    history: History[];\n  };\n};\n\ntype History = {\n  amount: number;\n  change: string;\n};\n\nexport const Person = ({ value }: Props) => {\n  const { name, amount, history } = value;\n\n  return (\n    <li className=\"person\">\n      <span className=\"name\">{name}</span>\n      <span className=\"amount\">\n        {amount % 1 !== 0 ? amount.toFixed(2) : amount}\n      </span>\n      <ul className=\"records\">\n        {history.map((record: History) => {\n          const { amount, change } = record;\n\n          return (\n            <li className={change} key={amount}>\n              {`${change === 'inc' ? `+` : `-`}${amount.toFixed(2)}`}\n            </li>\n          );\n        })}\n      </ul>\n    </li>\n  );\n};\n","import React from 'react';\n\nimport { useStore } from '../store';\nimport { Person } from './Person';\n\ntype Record = {\n  name: string;\n  amount: number;\n  history: History[];\n};\n\ntype History = {\n  amount: number;\n  change: string;\n};\n\nexport const People = () => {\n  const records: any = useStore(state => state.records);\n\n  return (\n    <ul className=\"people\">\n      {records.map((person: Record) => (\n        <Person key={person.name} value={person} />\n      ))}\n    </ul>\n  );\n};\n","import React from 'react';\n\nimport { Form } from './components/Form';\nimport { People } from './components/People';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header>\n        <h1>Loaned</h1>\n        <Form />\n      </header>\n      <People />\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}